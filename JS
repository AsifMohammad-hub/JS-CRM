// JavaScript source code

function createRecord() {

    var accountInfo = '';
    var accountName = "Alex Ferguson";
    var primaryContactId = "25A17064-1AE7-E611-80F4-E0071B661F01"; //-- Abraham McCormick
    var primaryContactName = "Abraham McCormick";
    var accountCategoryCode = Category.Standard;
    var annualRevenue = 7500000;

    var entityData =
    {
        "name": accountName,
        "revenue": annualRevenue,        // Currency (money type) ---Display Text = Annual Revenue
        "donotphone": false,    //Two Option (boolean type) ---Display Text = Do not allow Phone Calls
        "address1_longitude": 112.512634,     //Floating Point Number (decimal type) --- Display Text = Address 1: Longitude
        "address1_composite": "This is address 1",  //Multiple Lines of Text (memo type) --- Display Text = Address 1
        "accountcategorycode": accountCategoryCode,     // Option Set --- Display Text = Category
        "primarycontactid@odata.bind": "/contacts(" + primaryContactId + ")" //--- Lookup --- Display Text = Primary Contact
    }

    Xrm.WebApi.online.createRecord("account", entityData).then(
        function success(result) {
            //Success - No Return Data
            accountId = result.id;
            var accountInfo = '';
            accountInfo += 'Account Name = ' + accountName + '\n';
            accountInfo += 'Primary Contact = ' + primaryContactName + '\n';
            accountInfo += 'Category = Standard \n';
            accountInfo += 'Annual Revenue = ' + annualRevenue + '\n';

            alert("Account created. Details are given below : \n\n" + accountInfo + "\n\n" + "Going to update this record now.");
            updateRecord();
            //return accountId;
        },
        function (error) {
            alert(error.message);
        }
    );
}

function executeCRUDOperationsByWebAPI() {
    createRecord();
}

function OnLoad(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Sample code for On Load Event
        Xrm.Utility.alertDialog("This is an alert for On Load Event.");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function OnSave(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Sample code for On Save Event
        Xrm.Utility.alertDialog("This is an alert for On Save Event.");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function OnChange(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Sample code for On Change Event
        Xrm.Utility.alertDialog("This is an alert for On Change Event.");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetLookupId(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get lookup ID here, Give lookup field logical name here
        var lookupId = formContext.getAttribute("new_organizationid").getValue()[0].id;
        Xrm.Utility.alertDialog(lookupId);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetLookupName(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get lookup name here, Give lookup field logical name here
        var lookupName = formContext.getAttribute("new_organizationid").getValue()[0].name;
        Xrm.Utility.alertDialog(lookupName);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetEntityLogicalName(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get entity logical name here, Give lookup field logical name here
        var entityName = formContext.getAttribute("new_organizationid").getValue()[0].entityType;
        Xrm.Utility.alertDialog(entityName);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetTextValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get text value of the field here, Give field logical name here
        var textValue = formContext.getAttribute("new_employeebusinessid").getValue();
        Xrm.Utility.alertDialog(textValue);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetOptionSetDataBaseValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get data base value of the option set field here, Give field logical name here
        var databaseValue = formContext.getAttribute("new_gender").getValue();
        Xrm.Utility.alertDialog(databaseValue);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetOptionSetTextValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get text value of the option set field here, Give field logical name here
        var optionSetTextValue = formContext.getAttribute("new_gender").getText();
        Xrm.Utility.alertDialog(optionSetTextValue);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetTwoOptionSetDataBaseValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get the value of the two option set field here, Give field logical name here
        var databaseValue = formContext.getAttribute("new_type").getValue();
        Xrm.Utility.alertDialog(databaseValue);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetDateFieldValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Getvalue of the field here, Give field logical name here
        var dateOfBirth = formContext.getAttribute("new_dateofbirth").getValue();
        Xrm.Utility.alertDialog(dateOfBirth);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetDateFieldValues(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get value of the field here, Give field logical name here
        var dateOfBirth = formContext.getAttribute("new_dateofbirth").getValue();
        //Get Year
        Xrm.Utility.alertDialog(dateOfBirth.getFullYear());
        //Get Month
        Xrm.Utility.alertDialog(dateOfBirth.getMonth());
        //Get Date(Day)
        Xrm.Utility.alertDialog(dateOfBirth.getDate());
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SetTextFieldValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Set the field value here
        formContext.getAttribute("new_employeebusinessid").setValue("abcd");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SetOptionSetDataBaseValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Set the field value here
        formContext.getAttribute("new_gender").setValue(123456);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SetTwoOptionSetDataBaseValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Set the field value here - true
        formContext.getAttribute("new_type").setValue(true);
        //Set the field value here - false
        formContext.getAttribute("new_type").setValue(false);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SetDateFieldValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get the current Date
        var dateOfBirth = new Date();
        //Set the Current Date to date field
        formContext.getAttribute("new_dateofbirth").setValue(dateOfBirth);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SetLookUpFieldValue(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        var lookupValue = new Array();
        var lookupValue[0]= new Object();
        lookupValue[0].id = "919F28C4-F9BB-E911-A977-000D3AF04F8C";//Guid of the Record to be set
        lookupValue[0].name = "Tata Consultancy Services"; //Name of the record to be set
        lookupValue[0].entityType = "new_organization" //Entity Logical Name
        formContext.getAttribute("new_organizationid").setValue(lookupValue);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SetTheFieldRequirementLevel(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Set as Business Required
        formContext.getAttribute("new_dateofbirth").setRequiredLevel("required");
        //Set as Buiness Recommended
        formContext.getAttribute("new_dateofbirth").setRequiredLevel("recommended");
        //Set as Optional
        formContext.getAttribute("new_dateofbirth").setRequiredLevel("none");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SetTheFieldState(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Set field as Read only
        formContext.getAttribute("new_dateofbirth").setDisabled(true);
        //Set field as Editable
        formContext.getAttribute("new_dateofbirth").setDisabled(false);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function ApplyLookUpFilter(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get the custom filter
        var filter = "";
        //Get the lookup field
        var lookupField = formContext.getAttribute("new_organizationid");

        //Apply custom Filter for lookup
        lookupField.addPreSearch(function () {
            lookupField.addCustomFilter(filter);
        });
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function ShowHideFields(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Show Field
        formContext.getAttribute("new_dateofbirth").setVisible(true);
        //Hide Field
        formContext.getAttribute("new_dateofbirth").setVisible(false);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function ShowHideNavigationItems(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Show Organizations
        formContext.ui.navigation.items.get("organizations").setVisible(true);
        //Hide Organizations
        formContext.ui.navigation.items.get("organizations").setVisible(false);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}
function SetFormNotification(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Set Form Notification
        formContext.ui.setFormNotification("This is a MS DYNAMICS CRM Form Notification", "INFO", "1");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function ClearFormNotification(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Clear Form Notification
        formContext.ui.clearFormNotification("This is a MS DYNAMICS CRM Form Notification", "INFO", "1");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function ShowProgressIndicator() {
    try {
        Xrm.Utility.showProgressIndicator("The Page is Loading... Please wait...");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function ClearProgressIndicator() {
    try {
        Xrm.Utility.closeProgressIndicator();
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function ShowHideTabs(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        var isProcessed = formContext.getAttribute("progres_isprocessed").getValue(); //Two Option set field
        var generalTab = formContext.ui.tabs.get("GENERAL"); //Get Tab
        if (isProcessed === false) {
            generalTab.setVisible(false); //Hide Tab
        } else {
            generalTab.setVisible(true); //Show Tab
        }
        formContext.ui.tabs.get("CASH_PLAN_FLOW_DETAILS").setDisplayState("collapsed"); //Collapse Tab
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function ShowHideSections(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        var isProcessed = formContext.getAttribute("progres_isprocessed").getValue(); //Two Option set field
        var generalTab = formContext.ui.tabs.get("GENERAL"); //Get Tab
        var asstPackages = generalTab.sections.get("ASSISTANCE_PACKAGES"); //Get sections
        var payments = generalTab.sections.get("PAYMENT_RECORDS"); //Get sections
        if (isProcessed === false) {
            asstPackages.setVisible(true); //Show Section
            payments.setVisible(false); //Hide Section
        } else {
            asstPackages.setVisible(false); //Show Section
            payments.setVisible(true); //Show Section
        }
        formContext.ui.tabs.get("CASH_PLAN_FLOW_DETAILS").setDisplayState("collapsed"); //Collapse Tab
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SaveForm(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Save Form
        formContext.data.entity.save();
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SaveFormAndClose(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Save Form and Close
        formContext.data.entity.save("saveandclose");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function SaveFormAndOpenCreateForm(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Save Form and Close
        formContext.data.entity.save("saveandnew");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function CloseForm(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Close Form
        formContext.ui.close();
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function ForceSaveDataOnReadOnlyField(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Save forcefully
        formContext.getAttribute("new_employeetype").setSubmitMode("always");
        //Save forcefully
        formContext.getAttribute("new_employeetype").setSubmitMode("never");
        //Save forcefully
        formContext.getAttribute("new_employeetype").setSubmitMode("dirty");
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetFormDirtyFields(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        var attributes = formContext.data.entity.attributes.get()
        for (var i in attributes) {
            var attribute = attributes[i];
            if (attribute.getIsDirty()) {
                Xrm.Utility.alertDialog("Attribute dirty: " + attribute.getName());
            }
        }
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetFormType(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get Form Type
        var formType = formContext.ui.getFormType();
        Xrm.Utility.alertDialog(formType);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetGuidOfTheRecord(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get the current Record Guid
        var recordGuid = formContext.data.entity.getId();
        Xrm.Utility.alertDialog(recordGuid);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}


function GetGuidOfTheRecord(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get the Current User Guid
        var userGuid = formContext.context.getUserId();
        Xrm.Utility.alertDialog(userGuid);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetSecurityRolesOfCurrentUser(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get the Current User Guid
        var userRoles = formContext.context.getUserRoles();
        Xrm.Utility.alertDialog(userRoles);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetTheCRMClientUrl(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get the Client Url
        var clientUrl = formContext.context.getClientUrl();
        Xrm.Utility.alertDialog(clientUrl);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetTheUserLanguageID(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get the Current User Language ID
        var userLanguage = formContext.context.getUserLcid();
        Xrm.Utility.alertDialog(userLanguage);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function GetTheCurrentUserName(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        //Get the Current User Name
        var userName = formContext.context.userSettings.userName;
        Xrm.Utility.alertDialog(userName);
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function CreateRecord() {
    try {
        var entityName = "new_organization"; //Entity Logical Name
        //Data used to Create record
        var data = {
            "new_organizationname": "Tata Consultancy Services",
            "new_description": "This is the description of Tata Consultancy Services",
            "new_noofemployees": 400000,
            "new_revenue": 20000000
        }
        Xrm.WebApi.createRecord(entityName, data).then(
            function success(result) {
                Xrm.Utility.alertDialog("Success");
            },
            function (error) {
                Xrm.Utility.alertDialog("Error");
            }
        );
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function UpdateRecord() {
    try {
        var entityName = "new_organization"; //Entity Logical Name
        var recordId = "919F28C4-F9BB-E911-A977-000D3AF04F8C"; //Guid of the Record
        //Data used to Create record
        var data = {
            "new_organizationname": "Tata Consultancy Services",
            "new_description": "This is the description of Tata Consultancy Services",
            "new_noofemployees": 450000,
            "new_revenue": 30000000
        }
        Xrm.WebApi.updateRecord(entityName, recordId, data).then(
            function success(result) {
                Xrm.Utility.alertDialog("Success");
            },
            function (error) {
                Xrm.Utility.alertDialog("Error");
            }
        );
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function DeleteRecord() {
    try {
        var entityName = "new_organization"; //Entity Logical Name
        var recordId = "919F28C4-F9BB-E911-A977-000D3AF04F8C"; //Guid of the Record
        Xrm.WebApi.deleteRecord(entityName, recordId).then(
            function success(result) {
                Xrm.Utility.alertDialog("Success");
            },
            function (error) {
                Xrm.Utility.alertDialog("Error");
            }
        );
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function RetrieveRecord() {
    try {
        var entityName = "new_organization"; //Entity Logical Name
        var recordId = "919F28C4-F9BB-E911-A977-000D3AF04F8C"; //Guid of the Record
        var columnsToRetrieve = "$select=new_organizationname, new_noofemployees, new_revenue"; //Columns to Retrieve
        Xrm.WebApi.retrieveRecord(entityName, recordId, columnsToRetrieve).then(
            function success(result) {
                Xrm.Utility.alertDialog("Success");
            },
            function (error) {
                Xrm.Utility.alertDialog("Error");
            }
        );
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function RetrieveMultipleRecords() {
    try {
        var entityName = "new_organization"; //Entity Logical Name
        var query = "?$select=new_organizationname, new_noofemployees, new_revenue&$top=3"; //Columns to Retrieve
        Xrm.WebApi.retrieveMultipleRecords(entityName, query).then(
            function success(result) {
                Xrm.Utility.alertDialog("Success");
            },
            function (error) {
                Xrm.Utility.alertDialog("Error");
            }
        );
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function CallAsynchronousAction(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        var webApiVersionNumber = "v9.1";
        var serverURL = formContext.context.getClientUrl() + "/api/data/" + webApiVersionNumber + "/";;
        var actionName = "new_customaction"; //Action name
        var data = {}; //Action Parameters
        if (typeof (data) === "undefined") {
            data = {};
        }
        var oDataEndPoint = serverURL + actionName;
        var req = new XMLHttpRequest();
        req.open("POST", oDataEndPoint, true); //Action will be invoked Asynchronously
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        req.setRequestHeader("OData-MaxVersion", "4.0");
        req.setRequestHeader("OData-Version", "4.0");
        req.onreadystatechange = function () {
            if (this.readyState === 4) {
                req.onreadystatechange = null;
                if (this.status === 204 || this.status === 200) {
                    if (this.statusText === "No Content" || this.statusText === "") // In case of 204
                        var response = req.response;
                    else {
                        var response = JSON.parse(req.response);
                    }
                } else {
                    var error = JSON.parse(req.response).error;
                    Xrm.Utility.alertDialog(error.message);
                }
            }
        };
        req.send(JSON.stringify(data));
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function CallSynchronousAction(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        var webApiVersionNumber = "v9.1";
        var serverURL = formContext.context.getClientUrl() + "/api/data/" + webApiVersionNumber + "/";;
        var actionName = "new_customaction"; //Action name
        var data = {}; //Action Parameters
        if (typeof (data) === "undefined") {
            data = {};
        }
        var oDataEndPoint = serverURL + actionName;
        var req = new XMLHttpRequest();
        req.open("POST", oDataEndPoint, false); //Action will be invoked synchronously
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        req.setRequestHeader("OData-MaxVersion", "4.0");
        req.setRequestHeader("OData-Version", "4.0");
        req.onreadystatechange = function () {
            if (this.readyState === 4) {
                req.onreadystatechange = null;
                if (this.status === 204 || this.status === 200) {
                    if (this.statusText === "No Content" || this.statusText === "") // In case of 204
                        var response = req.response;
                    else {
                        var response = JSON.parse(req.response);
                    }
                } else {
                    var error = JSON.parse(req.response).error;
                    Xrm.Utility.alertDialog(error.message);
                }
            }
        };
        req.send(JSON.stringify(data));
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}

function AssociateRequest(executionContext) {
    try {
        //Get the form context
        var formContext = executionContext.getFormContext();
        var serverURL = formContext.context.getClientUrl();
        var currentEntityPlurarName = "fieldsecurityprofiles";
        var currentEntityId = "4E7C654C-7150-E711-811F-C4346BACBA84";//Get Field Security Profile id
        var relationShipName = "systemuserprofiles_association";
        var otherEntityPlurarName = "systemusers";
        var otherEntityId = "2F5FC0F6-F247-E811-810F-C4346BDCF131"; //Get System User id
        var associate = {}
        associate["@odata.id"] = serverURL + "/api/data/v9.1/" + otherEntityPlurarName + "(" + otherEntityId + ")";
        var req = new XMLHttpRequest();
        req.open("POST", serverURL + "/api/data/v9.1/" + currentEntityPlurarName + "(" + currentEntityId + ")/" + relationShipName + "/$ref", false);
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        req.setRequestHeader("OData-MaxVersion", "4.0");
        req.setRequestHeader("OData-Version", "4.0");
        req.onreadystatechange = function () {
            if (this.readyState == 4 /* complete */) {
                req.onreadystatechange = null;
                if (this.status == 204) {
                    //Success
                } else {
                    var error = JSON.parse(this.response).error;
                    Xrm.Utility.alertDialog(error.message);
                }
            }
        };
        req.send(JSON.stringify(associate));
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}


function onChange_birthdate() {
    var birthday = Xrm.Page.getAttribute("new_ccwispoc_birthday").getValue();
    if (birthday != null) {
        var age = calculate_age(birthday.getMonth(), birthday.getDate(), birthday.getFullYear());

        Xrm.Page.getAttribute("new_ccwispoc_age").setValue(age);
        //  Xrm.Page.getAttribute("new_ccwispoc_age").setSubmitMode('always');
    }
}

function calculate_age(birth_month, birth_day, birth_year) {
    today_date = new Date();
    today_year = today_date.getFullYear();
    today_month = today_date.getMonth();
    today_day = today_date.getDate();
    age = today_year - birth_year;

    if (today_month < (birth_month)) {
        age--;
    }
    if (((birth_month) == today_month) && (today_day < birth_day)) {
        age--;
    }
    return age;

}

function RetrieveGenoRecord(executionContext) {
    try {
        debugger;
        var formContext = executionContext.getFormContext();
        var entityName = "cw_genogramdetails"; //Entity Logical Name
        var recordId = formContext.data.entity.getId().replace('{', '').replace('}', ''); //Guid of the Record
        var query = "?$select=cw_name, cw_sex, cw_father,cw_mother,cw_hushband,cw_wfie,cw_markers,cw_contactid,cw_key,cw_familyid&$filter=cw_contactid eq (" + recordId +")";
        Xrm.WebApi.retrieveMultipleRecords(entityName, query).then(
            function success(result) {
                debugger;
                Xrm.Utility.alertDialog("Success" + result);
            },
            function (error) {
                debugger;
                Xrm.Utility.alertDialog(error);
            }
        );
    }
    catch (e) {
        Xrm.Utility.alertDialog(e.message);
    }
}



/*property
   EntityReference, Fetch, Int, Page, Queue, SetState, Soap, Target, Type,
   activityid, attributes, callAction, context, data, entity, entityType,
   error, getAttribute, getClientUrl, getControl, getId, globalContext, userSettings, userId,
   languageId, userName, getValue, hpi_text, id, key, length, log, name,
   onreadystatechange, open, parse, readyState, refresh, replace, response,
   send, setRequestHeader, setRequiredLevel, setSubmitMode, setValue, split,
   status, stringify, toString, type, value,
*/
/*global XrmServiceToolkit, Xrm,Process,getLocalizedNotification,isUndefined,isNull,isNullOrUndefined,
setLookupLocalLabel
*/
/*jslint maxlen: 500*/
/*jslint white: true,for: true,this: true, single:true,  devel: true*/
/*jslint browser:true*/
/// <reference path="../../Utility/xrmtoolkit.js" />
// JavaScript source code
function onSave() {
    "use strict";
    return;
}
 
function onLoad() {
    "use strict";
    return;
}
 
function makefieldsMandatory(executionContext, attributes) {
    "use strict";
    var formContext = executionContext;
    attributes = attributes.split(",");
    var i;
    for (i = 0; i < attributes.length; i += 1) {
        if (!isNullOrUndefined(formContext.getControl(attributes[i]))) {
            formContext.getControl(attributes[i]).getAttribute().setRequiredLevel("required");
        }
    }
}
function makeQACodeMandatory(executionContext) {
    "use strict";
    var formContext = executionContext;
    makefieldsMandatory(formContext, "hpi_elevationqacodes");
    if (formContext.getAttribute("hpi_elevationqacodes").getValue() === null) { return true; }
}
function changeOwner(executionContext, ownerLookup) {
    "use strict";
    var formContext = executionContext;
    var owner = formContext.getAttribute("ownerid");
    if (owner !== null) {
        owner.setValue(ownerLookup);
        owner.setSubmitMode("always");
    }
}
function populateElevateTo(executionContext, elevateToValue) {
    "use strict";
    var formContext = executionContext;
    formContext.getAttribute("hpi_elevateto").setValue(elevateToValue);
}
 
function isAcceptElevationUserLevel2() {
    "use strict";
    var userDetails;
    var userQuery;
    var isShown;
 
    userQuery = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>" +
        "<entity name='systemuser'>" +
        "<attribute name='systemuserid' />" +
        "<attribute name='hpi_levels' />" +
        "<order attribute='hpi_levels' descending='false' />" +
        "<filter type='and'>" +
        "<condition attribute='systemuserid' operator='eq' uitype='systemuser' value='" + Xrm.Utility.getGlobalContext().userSettings.userId + "' />" +
        "</filter>" +
        "<link-entity name='hpi_systemuser_hpi_supportlevel' intersect='true' visible='false' to='systemuserid' from='systemuserid'>" +
        "<link-entity name='hpi_supportlevel' to='hpi_supportlevelid' from='hpi_supportlevelid' alias='aa'>" +
        "<filter type='and'>" +
        "<condition attribute='hpi_name' value='LVL2' operator='eq'/>" +
        "</filter>" +
        "</link-entity>" +
        "</link-entity>" +
        "</entity>" +
        "</fetch>";
    userDetails = hpiXrmUtilities.webAPI.ExecuteFetchXML("systemusers", userQuery);
    if (userDetails === null || userDetails.length === 0) {
 
        isShown = false;
    }
    else {
        isShown = true;
    }
    return isShown;
}
function setCustomStatus(executionContext, value) {
    "use strict";
    var formContext = executionContext;
    var status = formContext.getAttribute("statuscode");
    if (status !== null) {
        status.setValue(value);
        status.setSubmitMode("always");
        formContext.data.refresh(true);
    }
}
function setCustomStatusWithIssueComplexityMandatory(executionContext, value) {
    "use strict";
    var formContext = executionContext;
    var status = formContext.getAttribute("statuscode");
    if (status !== null) {
        status.setValue(value);
        status.setSubmitMode("always");
        formContext.getAttribute("hpi_issuecomplexity").setRequiredLevel("required");
        formContext.getAttribute("hpi_l2elevationinhibitor").setRequiredLevel("required");
        formContext.getAttribute("hpi_l2elevationprevention").setRequiredLevel("required");
        formContext.getAttribute("hpi_l2elevationresolution").setRequiredLevel("required");
        formContext.getAttribute("hpi_l2elevationrootcause").setRequiredLevel("required");
        formContext.data.refresh(true);
    }
}
function acceptElevationProcess(executionContext) {
    "use strict";
    var userLanguageCode = Xrm.Utility.getGlobalContext().userSettings.languageId;
    var messageAttributes;
    if (!isAcceptElevationUserLevel2) {
        var messageObject = getLocalizedNotification("L2UserTakeAction", userLanguageCode);
        if (!isNullOrUndefined(messageObject) && messageObject.length > 0) {
            messageAttributes = messageObject[0].attributes;
            if (!isNullOrUndefined(messageAttributes) && !isNullOrUndefined(messageAttributes.hpi_text)) {
                alert(messageAttributes.hpi_text.value);
                return;
            }
        }
    }
    // Elevation in progress, User --> Elevate to
    var setUservalue = [];
    setUservalue[0] = {};
    setUservalue[0].id = Xrm.Utility.getGlobalContext().userSettings.userId;
    setUservalue[0].entityType = 'systemuser';
    setUservalue[0].name = Xrm.Utility.getGlobalContext().userSettings.userName;
    populateElevateTo(executionContext, setUservalue);
    changeOwner(executionContext, setUservalue);
    setCustomStatus(executionContext, 100000003);
}
 
function needsInputElevationProcess(executionContext) {
    "use strict";
    var formContext = executionContext;
    // set needs input
    changeOwner(formContext, formContext.getAttribute("createdby").getValue());
    setCustomStatus(formContext, 100000002);
}
 
function createQueueItem(executionContext, queue) {
    "use strict";
    var formContext = executionContext;
    var messageAttributes;
    var req = new XMLHttpRequest();
    req.open("POST", Xrm.Utility.getGlobalContext().getClientUrl() + "/api/data/v9.1/queues(" + queue.queueid + ")/Microsoft.Dynamics.CRM.AddToQueue", false);
    req.setRequestHeader("OData-MaxVersion", "4.0");
    req.setRequestHeader("OData-Version", "4.0");
    req.setRequestHeader("Accept", "application/json");
    req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    req.onreadystatechange = function () {
        if (this.readyState === 4) {
            req.onreadystatechange = null;
            if (this.status !== 200 && this.status !== 204) {
                console.log(JSON.parse(this.response).error);
                var messageObject = getLocalizedNotification("ErrorOccured", Xrm.Utility.getGlobalContext().userSettings.languageId);
                if (!isNullOrUndefined(messageObject) && messageObject.length > 0) {
                    messageAttributes = messageObject[0].attributes;
                    if (!isNullOrUndefined(messageAttributes) && !isNullOrUndefined(messageAttributes.hpi_text)) {
                        alert(messageAttributes.hpi_text.value);
                    }
                }
            }
        }
    };
    var postData = {
        "Target": {
            "activityid": formContext.data.entity.getId().replace("{", '').replace("}", ""),
            "@odata.type": "Microsoft.Dynamics.CRM.hpi_l2elevationactivity"
        }
    };
    req.send(JSON.stringify(postData));
}
function getAssignmentTeam(executionContext) {
    "use strict";
    /// var result;
    var formContext = executionContext;
    Process.callAction(null, null, "hpi_applyroutingrule", [
        {
            key: "CaseReference",
            type: Process.Type.EntityReference,
            value: {
                id: formContext.getAttribute("hpi_caseid").getValue()[0].id, entityType: "incident"
            }
        },
        {
            key: "RoutingRuleType",
            type: Process.Type.Int,
            value: 100000000
        }], function (params) {
            if (params !== null && params.Queue !== null) { createQueueItem(executionContext, params.Queue); }
        }, function (e) {
            alert(e);
        });
}
 
function submitActionElevationProcess(executionContext) {
    "use strict";
    var formContext = executionContext;
 
    makefieldsMandatory(formContext, "hpi_priority");
 
    if (formContext.getControl("hpi_priority").getAttribute().getValue() === null) {
        return;
    }
 
    var status = formContext.getAttribute("statuscode");
    if (status !== null) {
        // Needs Input
        if (status.getValue() === 100000002) {
            // Elevation in progress, Elevate to -> owner
            changeOwner(formContext, formContext.getAttribute("hpi_elevateto").getValue());
            setCustomStatus(formContext, 100000003);
        }
        // New or Elevation rejected
        else if (status.getValue() === 1 || status.getValue() === 100000001) {
            // waiting for approval
            getAssignmentTeam(executionContext);
            setCustomStatus(formContext, 100000000);
        }
    }
}
function rejectElevationProcess(executionContext) {
    "use strict";
    var formContext = executionContext;
    // Elevation rejected
    changeOwner(formContext, formContext.getAttribute("createdby").getValue());
    setCustomStatus(formContext, 100000001);
}
 
function solutionProvidedElevationProcess(executionContext) {
    "use strict";
    var formContext = executionContext;
    // set solution provided
    changeOwner(formContext, formContext.getAttribute("createdby").getValue());
    setCustomStatusWithIssueComplexityMandatory(formContext, 100000004);
}
function isSolutionProvidedUserOwner(executionContext) {
    "use strict";
    var formContext = executionContext;
    try {
        setLookupLocalLabelFromFormContext(formContext, "hpi_notesactiontype", "hpi_notesactiontype", "hpi_actiontype", "hpi_notesactiontypes");
    }
    catch (ex) {
        alert(ex.toString());
    }
    var owner = formContext.getAttribute("ownerid");
    var currentUserId = Xrm.Utility.getGlobalContext().userSettings.userId;
    if (owner.getValue()[0].id === currentUserId) { return true; }
    else { return false; }
}
 
function rejectSolutionElevationProcess(executionContext) {
    "use strict";
    var formContext = executionContext;
    // status in Progress
    changeOwner(formContext, formContext.getAttribute("hpi_elevateto").getValue());
    setCustomStatus(formContext, 100000003);
}
 
function acceptSolutionElevationProcess(executionContext) {
    "use strict";
    setCustomStatus(executionContext, 100000006);
}
 
function completeElevationProcess(executionContext) {
    "use strict";
    var formContext = executionContext;
    var id = formContext.data.entity.getId().replace('{', '').replace('}', '');
    var parameterObject = {};
    parameterObject.statecode = 1;
    parameterObject.statuscode = 2;
    hpiXrmUtilities.webAPI.ExecuteUpdateRecord("hpi_l2elevationactivities", id, parameterObject, null, null, false);
    formContext.data.refresh(true);
}
 
function voidElevationProcess(executionContext) {
    "use strict";
    var formContext = executionContext;
    var id = formContext.data.entity.getId().replace('{', '').replace('}', '');
    var parameterObject = {};
    parameterObject.statecode = 1;
    parameterObject.statuscode = 100000005;
    hpiXrmUtilities.webAPI.ExecuteUpdateRecord("hpi_l2elevationactivities", id, parameterObject, null, null, false);
    formContext.data.refresh(true);
}
function elevationProcess(executionContext, action) {
    "use strict";
    switch (action) {
        case "submitaction":
            submitActionElevationProcess(executionContext);
            break;
        case "needsinput":
            needsInputElevationProcess(executionContext);
            break;
        case "acceptelevation":
            acceptElevationProcess(executionContext);
            break;
        case "rejectelevation":
            rejectElevationProcess(executionContext);
            break;
        case "solutionprovided":
            solutionProvidedElevationProcess(executionContext);
            break;
        case "rejectsolution":
            rejectSolutionElevationProcess(executionContext);
            break;
        case "acceptsolution":
            acceptSolutionElevationProcess(executionContext);
            break;
        case "voidelevation":
            voidElevationProcess(executionContext);
            break;
        case "completeelevation":
            completeElevationProcess(executionContext);
            break;
    }
}
 
async function ResolutionFilter(executionContext) {
    debugger;
    var formContext = executionContext.getFormContext();
    var attribute = formContext.getAttribute("hpi_l2elevationresolution"); //resolution lookup in L2 activity entity
    var filter = await fetchx(executionContext);
    debugger;
    alert("here" + filter);
    formContext.getControl("hpi_l2elevationresolution").addPreSearch(function () {
        alert(filter);
        formContext.getControl("hpi_l2elevationresolution").addCustomFilter(filter, "hpi_l2elevationresolution");
    });
}
 
 
async function fetchx(executionContext) {
    debugger;
    var formContext = executionContext.getFormContext();
    var caseid = formContext.getAttribute("hpi_caseid").getValue()[0].id;//case lookup field in L2 activity entity
    var segment = await Xrm.WebApi.retrieveRecord("incident", caseid, "?$select=hpi_pgubusinesssegment").then(
        function success(result) {
            debugger;
            try {
                alert(result["hpi_pgubusinesssegment"]);
                console.log(result.hpi_pgubusinesssegment);
                var filter = "<filter type='and'>" +
                    "<condition attribute='hpi_casebusinesssegment' operator='eq' value='" + result.hpi_pgubusinesssegment + "' />" +
                    "</filter>";
                //var filter = "<filter type='and'><condition attribute='hpi_casebusinesssegment' operator='eq' value='" + result.hpi_pgubusinesssegment + "' /></filter>";
                return filter;
 
            } catch (e) {
                alert(e);
 
            }
        },
        function (error) {
            debugger;
            console.log(error.message);
            return null;
        }
    );
    return segment;
}



